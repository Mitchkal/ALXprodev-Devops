#!/bin/bash
pokemon_list=("pikachu" "bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

mkdir -p pokemon_data
declare -a pids

# Retry function to fetch pokemon up to 3 times
download_pokemon() {
    local pokemon=$1
    local URL="https://pokeapi.co/api/v2/pokemon/$pokemon/"

    local OUTPUT_FILE="pokemon_data/${pokemon}.json"

    local  attempts=0
    local max_attempts=3
    local success=false

    while [ "$attempts" -lt "$max_attempts" ]; do
        ((attempts++))
        echo "Attempt $attempts: Fetching data for ${pokemon}..."

        # Make API call
        response=$(curl -s -w "%{http_code}" -o "$OUTPUT_FILE" "$URL")
        # Save the response to a file and capture the HTTP status code
        http_status="${response: -3}"

            
        if [ "$http_status" -eq 200 ]; then
            echo "Success: Saved data to pokemon_data/$OUTPUT_FILE"
            success=true
            break
        else
            echo "Attempt $attempts failed  for $pokemon (HTTP $http_status), retrying..."
            sleep 1 # Wait before retrying
            
        fi
    done
    if [ "$success" = false ]; then
        echo "[$(date)] Error: Failed to retrieve data for $pokemon after $max_attempts attempts. HTTP status code $http_status" >> errors.txt
        rm -f "$OUTPUT_FILE"
        echo "Killing jobs for $pokemon (PID $$)"
        kill $$
    fi

}
# Loop through each pokemon and fetch data in background
for pokemon in "${pokemon_list[@]}"; do
    download_pokemon "$pokemon" & 
    pid=$!
    echo "Started downloading $pokemon (PID $pid)"
    pids+=($pid)
done

echo "Running background jobs"
jobs

for pid in "${pids[@]}"; do
    wait "$pid"
done
# Wait for all background processes to finish

echo "All pokemon data fetched and Saved in pokemon_data directory"